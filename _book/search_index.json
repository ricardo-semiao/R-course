[["index.html", "R: Teoria e Aplicações Bem Vindo! Organização do Livro", " R: Teoria e Aplicações Ricardo Semião 03/2024 Bem Vindo! Este livro tem o objetivo de ensinar a a liguagem R, com duas especificidades: Ele começa do nível “nunca instalei o R na vida”, expõe conceitos com profundidade, apresentando um andamento rápido. Tem um foco no uso para ciência de dados e usando o tidyverse. Porém, apresenta os tópicos relevantes com uma visão mais “teórica”, deixando a aplicabilidade para o fim. O livro é dividido em três partes: “R base”, “Ciência de Dados com o Tidyverse”, e “Aplicações Diversas”. Elas são, em sua maior parte, uma curadoria, simplificação, e adaptação dos livros: Advanced R, 2nd Edition, R for Data Science, 2nd Edition, e R Cookbook, 2nd Edition (respectivamente). Antes de seguir adiante, uma palava motivacional: as vezes uma pessoa passa mais tempo estudando um assunto do que deveria, e quanto mais fundo vai, mais difícil é parar de estudar. Esse é o meu caso, mas gostaria de ter companhia nessa situação (ninguém é de ferro). Foi com isso em mente que montei esse material, para dar a oportunidade do leitor fazer o mesmo, da forma mais eficiente possível. Espero que goste! Organização do Livro Primeiros Passos Aqui, exponho a história da linguagem, seu objetivo, e posição dentre outras linguagens focadas em estatística. Também exponho, de uma maneira bastante preguiçosa, a preparação para começar a programar em R: a instalação e explicação da interface do RStudio. Primeira parte - R base Os conceitos basilares do R costumam ser ensinados rapidamente, para dar prioridade na manipulação de dados e aplicações. Esse curso não fará isso, iremos passar com bastante calma por essa dimensão. Tanto porque existem menos tutoriais que fazem isso, mas principalmente, porque aprender sobre como o R funciona com detalhe gera uma série de benefícios: Permite entender códigos mais complexos; Permite aprender fontes comuns de erros e como evitá-las; Permite escrever códigos mais elegantes e principalmente mais eficiêntes; Facilitará a explicação dos conceitos que empoderam o tidyverse. Essa abordagem é algo como ter aulas formais de uma língua, em oposição a ensino para turismo. A utilidade dessa abordagem depende de seu objetivo, se ele é “conseguir aplicar rapidamente novos conhecimentos”, outros livros serão mais úteis. Segunda parte - Ciência de Dados com o Tidyverse Na segunda parte, iremos ver sobre manipulação de dados, porque ela é uma tarefa que será necessária para praticamente todas as aplicações do R. Existem vários frameworks diferentes para isso, o R base, o DataTable, e o tidyverse. Nesse curso escolho o tidyverse pois é um dos agregados de pacotes mais bem trabalhados, com uma sintaxe simples de entender, e que abrange todas as etapas da manipulação de dados. Ao fim, também trataremos rapidamente sobre um framework para lidar com datas e séries de tempo. Terceira parte - Aplicações Diversas A parte três apresenta várias aplicações específicas em R, sem detalhar muito a fundo todos seus detalhes nem explicar a teoria por trás, logo mais com o objetivo de mostrar as possibilidades no R. "],["first_steps.html", "Primeiros passos História Por que R? Instalação Interface e ferramentas", " Primeiros passos História R é uma linguagem de programação para análise estatística criada em 1993 por Ross Ihaka e Robert Gentleman da Universdade de Auckland, Nova Zelândia. Foi inspirada na linguagem S, e por ser sua sucessora (e pela inicial dos autores), recebeu o nome R. Não, infelizmente, não é R de “Ricardo”. Algumas curiosidades: O “Comprehensive R Archive Network” (CRAN) foi criado em 1997 por Kurt Hornik e Fritz Leisch para armazenar o código fonte, documentação, e pacotes do R. O “R Core Team” foi formado em 1997 para desenvolver a linguagem, e em 2003 a “R Foundation” foi fundada para ajudar o projeto R. Em 2011 foi lançado o RStudio, um ambiente de desenvolvimento integrado para R. O código fonte está livre para uso sob licencsa GNU General Public Licence. O código fonte R utiliza scripts em C, C++, .Net, e Python para maior eficiência. Por que R? O R foi desenvolvido para análise estatística, então provê uma grande comunidade e variedade de pacotes acerca de temas como análise e vizualização de dados, modelos estatísticos, data science e machine learning. Embora consiga fazer uma grande gama de outros processos não relacionados aos supracitados, costuma ter menor eficiência em comparação a linguagens mais generalistas como Python, e C. O R, com sua estrutura de linguaem de programação, pode ser considerado mais difícil de usar que seus competidores “point and click” SAS, SPSS, Stata, Eviews, GRETL, entre outros, mas ao mesmo tempo, essa estrutura dá mais liberdade ao usuário, permitindo a resolução de problemas menos comuns. Instalação É preciso instalar o R e o RStudio, veja como neste tutorial do curso “R Para Jornalistas”. Obs: coincidentenmente, a maneira que jornalistas instalam o R serve para qualquer outra profissão também. Interface e ferramentas Existêm vários tutoriais online explicando a interface, como o da Datacamp (veja até “How to Write R Scripts in RStudio”) e este vídeo no youtube. Além disso, existem três configurações mais comuns de serem alteradas: alterar onde os arquivos são salvos por padrão (figura 1, “browse”); impedir que os dados da última vez que você entrou no R sejam recarregados quando você voltar (figura 1, “workspace”); e alterar aparência (figura 2). Todas elas podem ser encontradas na tab Tools &gt; Global Options: Mais informações úteis sobre a interface podem ser encontradas na Seção “Navigating the Software” do livro “R Cookbok 2nd Edition”. Até o momento, eu fui preguiçoso e não trouxe esse material para o livro. Ainda assim, veja as referências com calma, não deixe confusões com o software atrapalharem seu aprendizado. "],["r-base.html", "R Base", " R Base Bem vindo à primeira parte deste livro, onde estudaremos os conceitos na base do R. Partirei do zero absoluto, de modo que é possível que o leitor tenha algum nível de familiaridade com os temas, mas provavelmente, não na profundidade aqui abordada. O nível de complexidade pode ser tão grande quanto quisermos, é difícil saber onde parar, e muitos conceitos serão introduzidos rapidamente. Mas não se assute, muitas vezes, meu objetivo maior é passar uma intuição geral de como o R funciona, e dar um primeiro contato com os temas mais complexos. Tento ao máximo deixar claro onde gastar seu cérebro e onde nem tanto, e todo capítulo terá uma seção final de “Recapitulando”. Meu foco é mostrar a lógica do R, a “sintaxe e semântica” da linguagem. A “gramática/vocabulário”, isto é, funções, truques, e aplicações específicas, serão ensinadas de passagem e via exercícios. Mas no final, a ideia é ter apresentado a maioria das funções commumente relevantes, construindo uma lista de referência para futuras consultas. Relembrando que esta parte é majoritariamente uma curadoria, simplificação, e adaptação do livro Advanced R, 2nd Edition. Os capítulos dessa seção estão organizados da seguinte maneira: Capítulo 1: aqui aprenderemos o básico sobre a sintaxe do R. Como imputar números e texto, o que são expressões e variáveis, e como realizar operações entre tudo isso. No geral, um capítulo bastante simples. Capítulo 2: a organização de tipos de dados no R é elegantemente simples, incluindo complexidade através da existência de metadados. A principal conclusão será entender a relação entre os diferentes tipos, porque esse conhecimento torna trivial pensar como uma mesma operação é aplicada em cada dado. Capítulo 3: nessa altura do campeonato, capaz que você esteja cansado de ver apenas teoria, esse capítulo é o mais “gramatical” de todos. Aprenderemos o que é a operação de selecionar e alterar partes de uma variável. Aqui, já fica claro o benefício de entender a organização dos tipos de dados. Capítulo 4: aqui aprenderemos a controlar o fluxo de um programa, isto é, como fazer um programa tomar decisões e repetir operações. Aprenderemos também a lidar com erros e avisos. Capítulo 5: em oposição ao capítulo 3, agora é hora de dar atenção aos sentimentos do R. Estávamos utilizando-as, mas não explicamos o que são as funções. Esse é o capítulo mais desafiador, mas boa parte da dificuldade pode ser deixada de lado, com perdas reduzidas ao leitor. Capítulo 6: aqui, aprenderemos sobre os paradigmas/estilos de programação funcional, orientada ao objeto, e meta, especificamente sobre sua abordagem no R. A programação funcional é uma ferramenta com ligação direta nos projetos de ciência de dados; Entender o básico de POO no R é importante para entender o uso de funções; Metaprogramação é um assunto útil em si mesmo, mas especialmente importante para entender as bases do tidyverse na segunda parte do livro. Capítulo 7: por fim, temos algum outros tópicos úteis, mas não essenciais para o seguimento do livro. Aqui, aprenderemos sobre algumas ferramentas de melhoria de vida que o RStudio provê, e alguns temas avançados sobre gerenciamento de memória, performance, e organização. Recapitulado: não só em cada capítulo, mas cada parte deste livro têm uma seção para retomar os conteúdos, especialmente o que será mais útil para a próxima parte. "],["syntax-variables.html", "Capítulo 1 Sintaxe e Variáveis 1.1 Sintaxe 1.2 Variáveis Recapitulando", " Capítulo 1 Sintaxe e Variáveis 1.1 Sintaxe 1.1.1 Programas, Expressões, e Código Um programa (ou script) é um arquivo que será avaliado/“rodado” pelo computador: traduzido da linguagem R para linguagem de máquina, e avaliado, linha a linha. Ele é a sua redação do ENEM. O programa é composto por expressões, as frases da sua redação. As frases podem fazer referências à outras (não existem num vácuo), mas devem ser são completas, com começo meio e fim. Algumas expressões podem ocupar uma linha inteira, várias linhas, ou apenas uma palavra. A palavra “código” as vezes é utilizada para se referir a um programa, mas aqui, uso código como se referindo às palavras que compõe o programa. Mas então, o que são os parágrafos? Não sei, a metáfora não é perfeita, paciência. Código Quais palavras podemos usar? Valores/dados, que podem textos (chamados de strings na computação), números, ou algo mais complexo. Variáveis, que são nomes associados à valores. Operadores (símbolos como +, &gt;) e funções, que definem operações à serem realizadas nas variáveis/valores. Em termos simplificados, valores, dados, e variáveis, são nossos substantivos (variáveis são nomes próprios), enquanto operadores e funções são nossos verbos. Como imputar essas palavras? Texto/strings: utilize \" ou ': &quot;Hello World!&quot;, &#39;Hello World!&#39;. Números: simplesmente escreva-os: 1. “Algo mais complexo”: calma, tudo em seu tempo. Operadores: são imputados como 1+1, e funções parecem “operadores por extenso” sum(1, 1). Parênteses podem ser utilizados em operações matemáticas: (1+1)/2. Comentários: texto que não será avaliado como código. Use o símbolo #, que torna tudo após delena mesma linha, um comentário. Obs: nos exemplos deste livro, um comentário no formato #&gt; ... indica o resultado esperado da expressão que o precede. Expressões Expressões são aglomerações de código. Nós gostamos de expressões “completas”, no sentido que 1+1 é uma expressão completa mas 1+ não. Assim como sum(1,1) e sum(1. No futuro, ficará claro que “completa” é sinônimo de “retorna um valor” (mesmo que invisivelmente). Uma expressão pode ser delimitada por uma quebra de linha, ou por chaves {}. As chaves permitem criar expressões que ocupem mais do que uma quebra de linha. Veja alguns exemplos abaixo, note que expressões podem ser compostas de outras expressões: 1 #é uma expressão {1} #é a mesma expressão que a anterior 1 + 1 #é uma expressão, uma operação &quot;+&quot; sobre dois &quot;1&quot;&#39;s { 1 + 1 2 + 2 } #é uma expressão, duas operações de soma 1 + 1; 2 + 2 #é a mesma expressão que a anterior Nada disso deve fazer muito sentido em termos práticos ainda, tudo bem, apenas é preciso já ir se acostumando com a estrutura geral de um programa. Antes de avançar, vou mentir um pouco e dar uma definição simplificada de função, mas que será melhor detalhada no capítulo 5. Função: é uma expressão, que depende de variáveis, associada à um nome. Utilizar esse nome, indicando os valores das variáveis envolvidas (entre parênteses), avalia a expressão, retornando seu resultado. liar &lt;- {x + y} #meramente ilustrativo, a sintaxe real é mais complexa liar(x = 1, y = 2) #&gt; 3 liar(1, 2) #equivalente à expressão anterior No capítulo 5, veremos que operadores são um tipo especial de função. Programas Um programa é uma sequência de expressões, que são avaliadas em ordem cronológica, tendo seus resultados impressos no console. Lembrando que uma sequência de expressões é uma expressão. 1.2 Variáveis Um dos tipos de palavras, as variáveis, merecem mais da nossa atenção. Mas não é para elas se acharem demais, dados e funções terão seus próprios capítulos. 1.2.1 Definindo Variáveis Para definir variáveis, escrevemos seu nome, = ou &lt;-, e a expressão que definirá seu valor: x = 1, x &lt;- 1. Ao rodar algo como x &lt;- 1, o valor 1 é salvo na memória do computador, e associado ao nome x. Note que temos três parcelas: A informação salva na memória do computador (no exemplo, 1), é chamada de objeto. O nome associado à esse objeto (no exemplo, x), é chamado de, bom, nome. Variável se refere ao conjunto nome-objeto. 1.2.2 Copy on Modify Com base no que aprendeu, como pensaríamos em y &lt;- x? A resposta não é nada óbvia. Note que temos duas opções: y pode ser um novo nome, associado ao mesmo objeto, mesma posição na memória do computador, que x. y pode ser um novo nome, associado a um novo objeto, nova posição na memória do computador, que x, mas carregando a mesma informação. No R, a realidade é a primeira opção. Porém, se y for alterado, x não é. O que ocorre é que uma nova posição na memória é criada para armazenar (ao menos parte da) informação do novo y. Esse processo, de apenas “separar”/“copiar” objetos quando modificados, é chamado de copy-on-modify. Diferentes tipos de dados terão diferentes relações com esse processo, mas vou poupá-los disso. 1.2.3 Outras Características Note que = e &lt;- são muito similares, mas = serve para mais coisas que somente definição de variáveis, como indicar argumentos em uma função. Portanto, &lt;- funciona como “definidor” em mais contextos, e é uma má prática utilizar = como definidor. Ambos podem definir várias variáveis de uma vez: x = y = 3, x &lt;- y &lt;- 3, x = y &lt;- 3. Existe um terceiro operador &lt;&lt;-, que será discutido no capítulo 5. 1.2.4 Regras de Nomenclatura Nem toda combinação de caracteres pode ser um nome de variável. As principais regras são: Nomes podem conter letras, números, “.” e “_“. São “case-sensitive”. Podem começar apenas com letras ou “.”. Não podem ser palavras reservadas como “TRUE”. Recapitulando 1.2.5 Dicionário de Funções "],["data-attributes.html", "Capítulo 2 Tipos de Dados e Atributos 2.1 Tipos de Dados 2.2 Atributos", " Capítulo 2 Tipos de Dados e Atributos 2.1 Tipos de Dados 2.1.1 Famílias 2.1.2 Vetores Atômicos 2.1.3 Listas 2.2 Atributos 2.2.1 Nomes 2.2.2 Dimensões 2.2.3 Classes "],["subsetting.html", "Capítulo 3 Subsetting 3.1 Operador [ 3.2 Operador [[ 3.3 Atribuição 3.4 Aplicações", " Capítulo 3 Subsetting 3.1 Operador [ 3.2 Operador [[ 3.3 Atribuição 3.4 Aplicações "],["control-conditions.html", "Capítulo 4 Control Flow e Condições 4.1 Introdução 4.2 Choices 4.3 Loops 4.4 Condições", " Capítulo 4 Control Flow e Condições 4.1 Introdução 4.2 Choices 4.3 Loops 4.4 Condições "],["functions-environments.html", "Capítulo 5 Funções e Ambientes 5.1 Fundamentos 5.2 Ambientes 5.3 Scoping e Evaluation 5.4 OOP: Funções Genéricas 5.5 Conceitos Adicionais", " Capítulo 5 Funções e Ambientes 5.1 Fundamentos 5.2 Ambientes 5.3 Scoping e Evaluation 5.4 OOP: Funções Genéricas 5.5 Conceitos Adicionais "],["paradigms.html", "Capítulo 6 Paradigmas de Programação 6.1 Programação Funcional 6.2 Programação Orientada ao Objeto 6.3 Metaprogramação", " Capítulo 6 Paradigmas de Programação 6.1 Programação Funcional 6.2 Programação Orientada ao Objeto 6.3 Metaprogramação "],["other-topics.html", "Capítulo 7 Outros Tópicos 7.1 Projetos, Github, e Addins 7.2 Debbuging 7.3 Gerenciamento de Memória 7.4 Performance 7.5 Organização de Código e Boas Práticas", " Capítulo 7 Outros Tópicos 7.1 Projetos, Github, e Addins 7.2 Debbuging 7.3 Gerenciamento de Memória 7.4 Performance 7.5 Organização de Código e Boas Práticas "],["recapitulando-1.html", "Recapitulando", " Recapitulando "],["ciência-de-dados-com-o-tidyverse.html", "Ciência de Dados com o Tidyverse", " Ciência de Dados com o Tidyverse "],["ciência-de-dados-e-importação.html", "Capítulo 8 Ciência de Dados e Importação", " Capítulo 8 Ciência de Dados e Importação "],["manipulação-de-dados.html", "Capítulo 9 Manipulação de Dados", " Capítulo 9 Manipulação de Dados "],["manipulação-de-strings-e-factors.html", "Capítulo 10 Manipulação de Strings e Factors", " Capítulo 10 Manipulação de Strings e Factors "],["visualização-gráfica.html", "Capítulo 11 Visualização Gráfica", " Capítulo 11 Visualização Gráfica "],["programação-funcional-1.html", "Capítulo 12 Programação Funcional", " Capítulo 12 Programação Funcional "],["manipulação-de-séries-de-tempo.html", "Capítulo 13 Manipulação de Séries de Tempo", " Capítulo 13 Manipulação de Séries de Tempo "],["aplicações-diversas.html", "Aplicações Diversas", " Aplicações Diversas Descição da seção "],["dicionário-de-funções-1.html", "Dicionário de funções", " Dicionário de funções "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
